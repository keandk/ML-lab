var _0x42e9=['Legacy\x20Back\x20End','Full\x20Stack','Front\x20End\x20Libraries','JavaScript\x20Algorithms\x20and\x20Data\x20Structures','Data\x20Visualization','Information\x20Security\x20and\x20Quality\x20Assurance','findById','shareReplay','keys','email','map','getCompletedChallenges$','just','completedChallenges','name','combineLatest','fromPromise','string','Certificates\x20updated','username','subscribe','json','success','info','findOne','toLowerCase','We\x20could\x20not\x20find\x20a\x20user\x20with\x20the\x20username\x20\x22','profileUI','isCheater','certifications\x20at\x20this\x20time','isHonest','find','MMMM\x20D,\x20YYYY','It\x20looks\x20like\x20user\x20','\x20certified','fcc:certification','loopback','Router','put','/certificate/verify','/certificate/showCert/:username/:cert','/internal','body','includes','status','template','join','views','emails','certified.ejs','models','frontEnd','backEnd','respWebDesign','frontEndLibs','dataVis2018','apisMicroservices','infosecQa','fullStack','every','dataVis','jsAlgoDataStruct'];(function(_0xf81467,_0xc00396){var _0x2dd3f4=function(_0x234ec6){while(--_0x234ec6){_0xf81467['push'](_0xf81467['shift']());}};_0x2dd3f4(++_0xc00396);}(_0x42e9,0x159));var _0x4c06=function(_0x2e96f0,_0x56b366){_0x2e96f0=_0x2e96f0-0x0;var _0x2603e5=_0x42e9[_0x2e96f0];return _0x2603e5;};import _0x103ae6 from'lodash';import _0x127cb7 from'loopback';import _0x193180 from'path';import _0x57ad53 from'dedent';import{Observable}from'rx';import _0xfadb75 from'debug';import{isEmail}from'validator';import _0x251355 from'date-fns/format';import{ifNoUser401}from'../utils/middleware';import{observeQuery}from'../utils/rx';import{legacyFrontEndChallengeId,legacyBackEndChallengeId,legacyDataVisId,respWebDesignId,frontEndLibsId,jsAlgoDataStructId,dataVis2018Id,apisMicroservicesId,infosecQaId,fullStackId}from'../utils/constantStrings.json';import _0x67a676 from'../utils/certTypes.json';import _0x437794 from'../utils/superBlockCertTypeMap';import{completeCommitment$}from'../utils/commit';const log=_0xfadb75(_0x4c06('0x0'));export default function bootCertificate(app){const api=app[_0x4c06('0x1')][_0x4c06('0x2')]();const certTypeIds=createCertTypeIds(app);const showCert=createShowCert(app);const verifyCert=createVerifyCert(certTypeIds,app);api[_0x4c06('0x3')](_0x4c06('0x4'),ifNoUser401,ifNoSuperBlock404,verifyCert);api['get'](_0x4c06('0x5'),showCert);app['use'](_0x4c06('0x6'),api);}const noNameMessage=_0x57ad53`
  We need your name so we can put it on your certification.
  Add your name to your account settings and click the save button.
  Then we can issue your certification.
  `;const notCertifiedMessage=name=>_0x57ad53`
  It looks like you have not completed the necessary steps.
  Please complete the required projects to claim the
  ${name} Certification
  `;const alreadyClaimedMessage=name=>_0x57ad53`
    It looks like you already have claimed the ${name} Certification
    `;const successMessage=(username,name)=>_0x57ad53`
    @${username}, you have successfully claimed
    the ${name} Certification!
    Congratulations on behalf of the freeCodeCamp.org team!
    `;function ifNoSuperBlock404(req,res,next){const {superBlock}=req[_0x4c06('0x7')];if(superBlock&&superBlocks[_0x4c06('0x8')](superBlock)){return next();}return res[_0x4c06('0x9')](0x194)['end']();}const renderCertifedEmail=_0x127cb7[_0x4c06('0xa')](_0x193180[_0x4c06('0xb')](__dirname,'..',_0x4c06('0xc'),_0x4c06('0xd'),_0x4c06('0xe')));function createCertTypeIds(app){const {Challenge}=app[_0x4c06('0xf')];return{[_0x67a676[_0x4c06('0x10')]]:getIdsForCert$(legacyFrontEndChallengeId,Challenge),[_0x67a676[_0x4c06('0x11')]]:getIdsForCert$(legacyBackEndChallengeId,Challenge),[_0x67a676['dataVis']]:getIdsForCert$(legacyDataVisId,Challenge),[_0x67a676[_0x4c06('0x12')]]:getIdsForCert$(respWebDesignId,Challenge),[_0x67a676[_0x4c06('0x13')]]:getIdsForCert$(frontEndLibsId,Challenge),[_0x67a676[_0x4c06('0x14')]]:getIdsForCert$(dataVis2018Id,Challenge),[_0x67a676['jsAlgoDataStruct']]:getIdsForCert$(jsAlgoDataStructId,Challenge),[_0x67a676[_0x4c06('0x15')]]:getIdsForCert$(apisMicroservicesId,Challenge),[_0x67a676[_0x4c06('0x16')]]:getIdsForCert$(infosecQaId,Challenge),[_0x67a676[_0x4c06('0x17')]]:getIdsForCert$(fullStackId,Challenge)};}function isCertified(ids,completedChallenges=[]){return _0x103ae6[_0x4c06('0x18')](ids,({id})=>_0x103ae6['find'](completedChallenges,({id:completedId})=>completedId===id));}const certIds={[_0x67a676[_0x4c06('0x10')]]:legacyFrontEndChallengeId,[_0x67a676['backEnd']]:legacyBackEndChallengeId,[_0x67a676[_0x4c06('0x19')]]:legacyDataVisId,[_0x67a676[_0x4c06('0x12')]]:respWebDesignId,[_0x67a676[_0x4c06('0x13')]]:frontEndLibsId,[_0x67a676[_0x4c06('0x1a')]]:jsAlgoDataStructId,[_0x67a676[_0x4c06('0x14')]]:dataVis2018Id,[_0x67a676['apisMicroservices']]:apisMicroservicesId,[_0x67a676[_0x4c06('0x16')]]:infosecQaId,[_0x67a676[_0x4c06('0x17')]]:fullStackId};const certText={[_0x67a676[_0x4c06('0x10')]]:'Legacy\x20Front\x20End',[_0x67a676[_0x4c06('0x11')]]:_0x4c06('0x1b'),[_0x67a676[_0x4c06('0x19')]]:'Legacy\x20Data\x20Visualization',[_0x67a676[_0x4c06('0x17')]]:_0x4c06('0x1c'),[_0x67a676[_0x4c06('0x12')]]:'Responsive\x20Web\x20Design',[_0x67a676[_0x4c06('0x13')]]:_0x4c06('0x1d'),[_0x67a676[_0x4c06('0x1a')]]:_0x4c06('0x1e'),[_0x67a676[_0x4c06('0x14')]]:_0x4c06('0x1f'),[_0x67a676[_0x4c06('0x15')]]:'APIs\x20and\x20Microservices',[_0x67a676['infosecQa']]:_0x4c06('0x20')};const completionHours={[_0x67a676[_0x4c06('0x10')]]:0x190,[_0x67a676[_0x4c06('0x11')]]:0x190,[_0x67a676[_0x4c06('0x19')]]:0x190,[_0x67a676[_0x4c06('0x17')]]:0x708,[_0x67a676[_0x4c06('0x12')]]:0x12c,[_0x67a676[_0x4c06('0x13')]]:0x12c,[_0x67a676[_0x4c06('0x1a')]]:0x12c,[_0x67a676[_0x4c06('0x14')]]:0x12c,[_0x67a676[_0x4c06('0x15')]]:0x12c,[_0x67a676[_0x4c06('0x16')]]:0x12c};function getIdsForCert$(id,Challenge){return observeQuery(Challenge,_0x4c06('0x21'),id,{'id':!![],'tests':!![],'name':!![],'challengeType':!![]})[_0x4c06('0x22')]();}const superBlocks=Object[_0x4c06('0x23')](_0x437794);function sendCertifiedEmail({email='',name,username,isRespWebDesignCert,isFrontEndLibsCert,isJsAlgoDataStructCert,isDataVisCert,isApisMicroservicesCert,isInfosecQaCert},send$){if(!isEmail(email)||!isRespWebDesignCert||!isFrontEndLibsCert||!isJsAlgoDataStructCert||!isDataVisCert||!isApisMicroservicesCert||!isInfosecQaCert){return Observable['just'](![]);}const notifyUser={'type':_0x4c06('0x24'),'to':email,'from':'quincy@freecodecamp.org','subject':_0x57ad53`
      Congratulations on completing all of the
      freeCodeCamp certifications!
    `,'text':renderCertifedEmail({'username':username,'name':name})};return send$(notifyUser)[_0x4c06('0x25')](()=>!![]);}function getUserIsCertMap(user){const {isRespWebDesignCert=![],isJsAlgoDataStructCert=![],isFrontEndLibsCert=![],is2018DataVisCert=![],isApisMicroservicesCert=![],isInfosecQaCert=![],isFrontEndCert=![],isBackEndCert=![],isDataVisCert=![],isFullStackCert=![]}=user;return{'isRespWebDesignCert':isRespWebDesignCert,'isJsAlgoDataStructCert':isJsAlgoDataStructCert,'isFrontEndLibsCert':isFrontEndLibsCert,'is2018DataVisCert':is2018DataVisCert,'isApisMicroservicesCert':isApisMicroservicesCert,'isInfosecQaCert':isInfosecQaCert,'isFrontEndCert':isFrontEndCert,'isBackEndCert':isBackEndCert,'isDataVisCert':isDataVisCert,'isFullStackCert':isFullStackCert};}function createVerifyCert(certTypeIds,app){const {Email}=app[_0x4c06('0xf')];return function verifyCert(req,res,next){const {body:{superBlock},user}=req;log(superBlock);let certType=_0x437794[superBlock];log(certType);return user[_0x4c06('0x26')]()['flatMap'](()=>certTypeIds[certType])['flatMap'](challenge=>{const certName=certText[certType];if(user[certType]){return Observable[_0x4c06('0x27')](alreadyClaimedMessage(certName));}let updateData={[certType]:!![]};if(challenge){const {id,tests,challengeType}=challenge;if(!user[certType]&&!isCertified(tests,user['completedChallenges'])){return Observable[_0x4c06('0x27')](notCertifiedMessage(certName));}updateData={...updateData,'completedChallenges':[...user[_0x4c06('0x28')],{'id':id,'completedDate':new Date(),'challengeType':challengeType}]};}if(!user[_0x4c06('0x29')]){return Observable[_0x4c06('0x27')](noNameMessage);}user[certType]=!![];const updatePromise=new Promise((resolve,reject)=>user['updateAttributes'](updateData,err=>{if(err){return reject(err);}return resolve();}));return Observable[_0x4c06('0x2a')](Observable[_0x4c06('0x2b')](updatePromise),completeCommitment$(user),sendCertifiedEmail(user,Email['send$']),(_0x103ae6,pledgeOrMessage)=>({'pledgeOrMessage':pledgeOrMessage}))[_0x4c06('0x25')](({pledgeOrMessage})=>{if(typeof pledgeOrMessage===_0x4c06('0x2c')){log(pledgeOrMessage);}log(_0x4c06('0x2d'));return successMessage(user[_0x4c06('0x2e')],certName);});})[_0x4c06('0x2f')](message=>{return res[_0x4c06('0x9')](0xc8)[_0x4c06('0x30')]({'response':{'type':message[_0x4c06('0x8')]('Congratulations')?_0x4c06('0x31'):_0x4c06('0x32'),'message':message},'isCertMap':getUserIsCertMap(user)});},next);};}function createShowCert(app){const {User}=app[_0x4c06('0xf')];function findUserByUsername$(username,fields){return observeQuery(User,_0x4c06('0x33'),{'where':{'username':username},'fields':fields});}return function showCert(req,res,next){let {username,cert}=req['params'];username=username[_0x4c06('0x34')]();const certType=_0x437794[cert];const certId=certIds[certType];const certTitle=certText[certType];const completionTime=completionHours[certType]||0x12c;return findUserByUsername$(username,{'isCheater':!![],'isFrontEndCert':!![],'isBackEndCert':!![],'isFullStackCert':!![],'isRespWebDesignCert':!![],'isFrontEndLibsCert':!![],'isJsAlgoDataStructCert':!![],'isDataVisCert':!![],'is2018DataVisCert':!![],'isApisMicroservicesCert':!![],'isInfosecQaCert':!![],'isHonest':!![],'username':!![],'name':!![],'completedChallenges':!![],'profileUI':!![]})['subscribe'](user=>{if(!user){return res[_0x4c06('0x30')]({'messages':[{'type':'info','message':_0x4c06('0x35')+username+'\x22'}]});}const {isLocked,showCerts}=user[_0x4c06('0x36')];if(!user[_0x4c06('0x29')]){return res['json']({'messages':[{'type':_0x4c06('0x32'),'message':_0x57ad53`
              This user needs to add their name to their account
              in order for others to be able to view their certification.
            `}]});}if(user[_0x4c06('0x37')]){return res[_0x4c06('0x30')]({'messages':[{'type':_0x4c06('0x32'),'message':'This\x20user\x20is\x20not\x20eligible\x20for\x20freeCodeCamp.org\x20'+_0x4c06('0x38')}]});}if(isLocked){return res['json']({'messages':[{'type':'info','message':_0x57ad53`
              ${username} has chosen to make their profile
                private. They will need to make their profile public
                in order for others to be able to view their certification.
            `}]});}if(!showCerts){return res['json']({'messages':[{'type':_0x4c06('0x32'),'message':_0x57ad53`
              ${username} has chosen to make their certifications
                private. They will need to make their certifications public
                in order for others to be able to view them.
            `}]});}if(!user[_0x4c06('0x39')]){return res[_0x4c06('0x30')]({'messages':[{'type':_0x4c06('0x32'),'message':_0x57ad53`
              ${username} has not yet agreed to our Academic Honesty Pledge.
            `}]});}if(user[certType]){const {completedChallenges=[]}=user;const {completedDate=new Date()}=_0x103ae6[_0x4c06('0x3a')](completedChallenges,({id})=>certId===id)||{};const {username,name}=user;return res[_0x4c06('0x30')]({'certTitle':certTitle,'username':username,'name':name,'date':_0x251355(new Date(completedDate),_0x4c06('0x3b')),'completionTime':completionTime});}return res[_0x4c06('0x30')]({'messages':[{'type':_0x4c06('0x32'),'message':_0x4c06('0x3c')+username+'\x20is\x20not\x20'+certText[certType]+_0x4c06('0x3d')}]});},next);};}