var _0x182a=['error','exit','toFixed','replace','_raw','static\x20const\x20uint8_t\x20','join','\x0a};','std::make_unique<v8::ScriptCompiler::CachedData>(',',\x20static_cast<int>(arraysize(','policy)','code_cache_.emplace(\x0a','\x20\x20\x22','\x22,\x0a','sort','Failed\x20to\x20generate\x20code\x20cache\x20for\x20\x27','push','log','Generated\x20cache\x20for\x20\x27',',\x20total\x20=\x20','#include\x20\x22node_native_module.h\x22\x0a#include\x20\x22node_internals.h\x22\x0a\x0a//\x20This\x20file\x20is\x20generated\x20by\x20tools/generate_code_cache.js\x0a//\x20and\x20is\x20used\x20when\x20configure\x20is\x20run\x20with\x20`--code-cache-path`\x0a\x0anamespace\x20node\x20{\x0anamespace\x20native_module\x20{\x0a','\x0a\x0avoid\x20NativeModuleLoader::LoadCodeCache()\x20{\x0a\x20\x20auto\x20policy\x20=\x20v8::ScriptCompiler::CachedData::BufferPolicy::BufferNotOwned;\x0a\x20\x20','\x0a\x20\x20','Generated\x20code\x20cache\x20C++\x20file\x20to\x20','internal/bootstrap/cache','util','argv'];(function(_0x4e75fd,_0x1f3e14){var _0x2927c6=function(_0x2ef334){while(--_0x2ef334){_0x4e75fd['push'](_0x4e75fd['shift']());}};_0x2927c6(++_0x1f3e14);}(_0x182a,0x1e3));var _0x334d=function(_0x1807e3,_0x46a18a){_0x1807e3=_0x1807e3-0x0;var _0x561d1d=_0x182a[_0x1807e3];return _0x561d1d;};'use strict';// Flags: --expose-internals
             // This file generates the code cache for builtin modules and
             // writes them into static char arrays of a C++ file that can be
             // compiled into the binary using the `--code-cache-path` option
             // of `configure`.
const {getCodeCache,compileFunction,cachableBuiltins}=require(_0x334d('0x0'));const {types:{isUint8Array}}=require(_0x334d('0x1'));const fs=require('fs');const resultPath=process[_0x334d('0x2')][0x2];if(!resultPath){console[_0x334d('0x3')]('Usage:\x20'+process['argv'][0x0]+'\x20'+process[_0x334d('0x2')][0x1]+'path/to/node_code_cache.cc');process[_0x334d('0x4')](0x1);}function formatSize(_0x66e0ad){if(_0x66e0ad<0x400){return _0x66e0ad[_0x334d('0x5')](0x2)+'B';}else if(_0x66e0ad<0x400**0x2){return(_0x66e0ad/0x400)[_0x334d('0x5')](0x2)+'KB';}else if(_0x66e0ad<0x400**0x3){return(_0x66e0ad/0x400**0x2)[_0x334d('0x5')](0x2)+'MB';}else{return(_0x66e0ad/0x400**0x3)[_0x334d('0x5')](0x2)+'GB';}}function getInitalizer(_0x93e20b,_0x1a6390){const _0x447d02=_0x93e20b[_0x334d('0x6')](/\//g,'_')[_0x334d('0x6')](/-/g,'_')+_0x334d('0x7');const _0x2409fb=_0x334d('0x8')+_0x447d02+'[]\x20=\x20{\x0a'+(_0x1a6390[_0x334d('0x9')](',')+_0x334d('0xa'));const _0x26ea74=_0x334d('0xb')+(_0x447d02+_0x334d('0xc')+_0x447d02+')),\x20')+_0x334d('0xd');const _0x52ceb8=_0x334d('0xe')+(_0x334d('0xf')+_0x93e20b+_0x334d('0x10'))+('\x20\x20'+_0x26ea74+'\x0a')+');';return{'definition':_0x2409fb,'initializer':_0x52ceb8};}const cacheDefinitions=[];const cacheInitializers=[];let totalCacheSize=0x0;function lexical(_0x166b36,_0x2cebff){if(_0x166b36<_0x2cebff){return-0x1;}if(_0x166b36>_0x2cebff){return 0x1;}return 0x0;}for(const key of cachableBuiltins[_0x334d('0x11')](lexical)){compileFunction(key);const cachedData=getCodeCache(key);if(!isUint8Array(cachedData)){console[_0x334d('0x3')](_0x334d('0x12')+key+'\x27');process[_0x334d('0x4')](0x1);}const size=cachedData['byteLength'];totalCacheSize+=size;const {definition,initializer}=getInitalizer(key,cachedData);cacheDefinitions[_0x334d('0x13')](definition);cacheInitializers['push'](initializer);console[_0x334d('0x14')](_0x334d('0x15')+key+'\x27,\x20size\x20=\x20'+formatSize(size)+(_0x334d('0x16')+formatSize(totalCacheSize)));}const result=_0x334d('0x17')+cacheDefinitions[_0x334d('0x9')]('\x0a\x0a')+_0x334d('0x18')+cacheInitializers[_0x334d('0x9')](_0x334d('0x19'))+'\x0a}\x0a\x0a}\x20\x20//\x20namespace\x20native_module\x0a}\x20\x20//\x20namespace\x20node\x0a';fs['writeFileSync'](resultPath,result);console['log'](_0x334d('0x1a')+resultPath);